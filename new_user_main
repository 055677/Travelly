import pandas as pd
import random
from sklearn.cluster import KMeans

# Load data from CSV files
cities_df = pd.read_csv('cities1.csv')
country_data = pd.read_csv('country.csv')
restaurant_data = pd.read_csv('restoran.csv')
hotel_data = pd.read_csv('hotels.csv')
places_to_visit_data = pd.read_csv('places.csv')
user_preferences = pd.read_csv('user_preferences1.csv')

# Perform k-means clustering on the ratings
n_clusters = 20
kmeans = KMeans(n_clusters=n_clusters, random_state=42)
user_ratings = user_preferences.iloc[:, 2:].values
user_preferences['Cluster'] = kmeans.fit_predict(user_ratings)

# Function to generate recommendations for a new user
def generate_recommendations(new_user_ratings):
    new_user_cluster = kmeans.predict([new_user_ratings])[0]
    cluster_city_ids = user_preferences[user_preferences['Cluster'] == new_user_cluster]['City_ID'].unique()
    recommended_cities = cities_df[cities_df['City_ID'].isin(cluster_city_ids)]['City'].tolist()
    return random.choice(recommended_cities)

# Function to print city information, including the country
def print_city_information(city_name, vacation_type):
    print("\nCity:", city_name)

    # Get country name
    city_id = cities_df.loc[cities_df['City'] == city_name, 'City_ID'].values[0]
    country_name = country_data.loc[country_data['City_ID'] == city_id, 'Country_Name'].values[0] if not country_data[country_data['City_ID'] == city_id].empty else "Unknown"
    print("Country:", country_name)

    # Hotel information based on vacation type
    print(f"\nHotel in {city_name}:")
    if vacation_type == 'family':
        print(hotel_data[hotel_data['City'] == city_name]['family_hotel'].to_string(index=False))

    # Restaurant information
    print(f"\nRestaurant in {city_name}:")
    if vacation_type == 'family':
        print(restaurant_data[restaurant_data['City'] == city_name]['fam_rest'].to_string(index=False))

    # Places to visit
    print("\nPlaces to Visit in", city_name)
    for category in ['Cultural_place', 'Historical_place', 'Adventure_place', 'City_place', 'Relax_place', 'Extreme_place']:
        print(f"\n{category.replace('_', ' ').title()}:")
        print(places_to_visit_data[places_to_visit_data['City'] == city_name][category].to_string(index=False))

# Get user ratings for each category
categories = ['Gyms', 'Local_Services', 'Monuments', 'Museums', 'Parks', 'Restaurants', 'Swimming_Pools', 'Theatres', 'View_Points']
new_user_ratings = [float(input(f"Enter your rating for {category.replace('_', ' ')}: ")) for category in categories]

# Ask user to input vacation type
vacation_type = input("Enter your vacation type (solo/family/couple): ")

# Recommend a random city based on new user preferences
recommended_city = generate_recommendations(new_user_ratings)

# Display recommended city name and print its information
print("\nRecommended City:")
print(recommended_city)
print_city_information(recommended_city, vacation_type.lower())

